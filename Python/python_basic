#打印
print("hello")
# -*- coding: UTF-8 -*-
#(# -*- coding: UTF-8 -*-或者输入# coding=utf-8  防止中文编码报错) 
print("你好")
#if 判断语句
a = 10
if a == 10:
    print("a is equal to 10")
else:
    print("a is not equal to 10")
#打印列表
list = ["libai","dufu"]
print (list)
#保留字符
# and	exec	not
# assert	finally	or
# break	for	pass
# class	from	print
# continue	global	raise
# def	if	return
# del	import	try
# elif	in	while
# else	is	with
# except	lambda	yield

# python中的if语句可以不适用大括号
if True:
    print(True)
else:
    print(False)

# 换行操作
one = 1
two = 2
three = 3
line = one + \
       two + \
       three
print(line)

# 语句中包含 [], {} 或 () 括号就不需要使用多行连接符
lines = ['a','b',
        'c']
print(lines)

# raw_input = ("按enter健退出，其他任意键显示...\n")
# print(raw_input)

# 输出
import sys
mystdout = "hello"
sys.stdout.write(mystdout+"\n")
# 将以上的信息在一行中输出
import sys; x = "hello"; sys.stdout.write(x+"\n")

# 不换行输出
x =1;y=2
print (x,y)
a = 10.0
print(a)
# 同事给多个变量赋值
a = b = c = 1
print(a)
a,b,c = 1,2,'libai'
print(a,b,c)
# del a
# print(a) #NameError: name 'a' is not defined

# Python支持四种不同的数字类型：

# int（有符号整型）
# long（长整型，也可以代表八进制和十六进制）
# float（浮点型）
# complex（复数）


# 索引
  # 从左到右默认是0开始，从右向左默认是-1，-2，...，下标为空则整体输出
strings = "abcdef"
print(strings[0]) #a 
print(strings[-1]) #f
print(strings[2:4]) #cd
print(strings[:3]) #abc
print(strings[3:]) #def
print(strings[::-1]) #fedcba 投下标：尾下标

# 输出两次
print(strings*2) #abcdefabcdef

# 字符串拼接
new_string = strings + "TEST"
print(new_string) #abcdefTEST

# 列表索引
list = ["hello",985,168.2,"world"]

print(list)
print(list[0]) #hello
print(list[-1])
print(list[:2])
print(list[2:]) 
print(list[::-1])

# 元组tuple类似，这里不在列举

# 字典
dict = {}
print(type(dict))
dict['one'] = "This is one"
dict[2] = "This is two"
print(dict)
print(dict['one']) #This is one
print(dict[2]) #This is two
print(dict.keys()) #dict_keys(['one', 2])
print(dict.values()) #dict_values(['This is one', 'This is two'])
print(dict.items()) #dict_items([('one', 'This is one'), (2, 'This is two')])


# 运算符 + - * / % // **
# 位运算符 异或运算符 & | ^ ~ << >>

a = 6 #0000 0110
b = 5 #0000 0101
c = a&b #两个相应位都为1,则该位的结果为1,否则为0 0000 0100
print(c)
d = a|b # 0000 0111 二个二进位有一个为1时，结果位就为1
print(d)
e = a^b #当两对应的二进位相异时，结果为1 0000 0011
print(e) #3
f = ~a #将二进制表示中的每一位取反，0 变为 1，1 变为 0   value：1111 1001
# 在Python中，整数是用补码形式表示的，所以对于正整数 `a` 的按位非操作 `~a` 实际上等价于 `-a - 1`。这是因为按位非操作会把一个正数转换为它的负数形式，并减去1。
print(f) # -7
a = a << 2 #运算数的各二进位全部左移若干位，由 << 右边的数字指定了移动的位数，高位丢弃，低位补0
print(a) # 24
a = a >> 2 #把">>"左边的运算数的各二进位全部右移若干位，>> 右边的数字指定了移动的位数
print(a)
# python 的逻辑运算符 and or not
# 布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值
# 布尔"或" - 如果 x 是非 0，它返回 x 的计算值，否则它返回 y 的计算值。
# 布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True
a = 100
b = 200
if a and b:
    print("a 和 b 都为真")
else:
    print("a 或 b 至少有一个为假")

if a or b:
    print("a 或 b 至少有一个为真")
else:
    print("a 和 b 都为假")
# 修改a的值
if not (a and b):
    print(True)
else:
    print(False)

# 成员运算符
# in not in
a = 1
list = [1,2,3,4,5]
if a in list:
    print(True)
else:
    print(False)
a = 6
if a not in list:
    print(True)
else:
    print(False)

# 身份运算符
# is | is not 
# is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等。
a = 100
b = 100
if a is b:
    print(True)
else:
    print(False)
if a ==b:
    print(True)
else:
    print(False)
print(id(a)) # 获取内存地址
print(id(b))
if a is not b:
    print(True)
else:
    print(False)
# python 运算优先级
# 最高到最低优先级的所有运算符

# **	指数 (最高优先级)
# ~ + -	按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
# * / % //	乘，除，取模和取整除
# + -	加法减法
# >> <<	右移，左移运算符
# &	位 'AND'
# ^ |	位运算符
# <= < > >=	比较运算符
# <> == !=	等于运算符
# = %= /= //= -= += *= **=	赋值运算符
# is is not	身份运算符
# in not in	成员运算符
# not and or	逻辑运算符

# 条件语句if
# 循环语句 while for break continue pass（占位）
for i in "hello":
    print("当前字母:",i)
print("循环结束")
list = ['libai','dufu','taoyuanming']
for i in list:
    print("列表中一个元素:",i)
# 使用索引获取列表中的值
for index in range(len(list)):
    print(list[index])
# 练习，打印三角形，菱形，正方形等
# https://www.runoob.com/w3cnote/prints-diamonds-triangles-rectangles.html
